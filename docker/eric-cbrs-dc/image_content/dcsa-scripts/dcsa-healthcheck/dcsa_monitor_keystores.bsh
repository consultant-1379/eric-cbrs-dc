#!/bin/bash
###########################################################################
# COPYRIGHT Ericsson 2022
#
# The copyright to the computer program(s) herein is the property of
# Ericsson Inc. The programs may be used and/or copied only with written
# permission from Ericsson Inc. or in accordance with the terms and
# conditions stipulated in the agreement/contract under which the
# program(s) have been supplied.
###########################################################################

# This script monitors and reloads when necessary the key and trust stores used for secure DCM -> DCSA communication

# GLOBAL VARIABLES
readonly DP_KEYSTORE_DIR=/ericsson/cbrs-dc-sa/keystore
readonly DP_KEYSTORE=${DP_KEYSTORE_DIR}/cbrs-dc-sa-keystore.jks
readonly DP_TRUSTSTORE_DIR=/ericsson/cbrs-dc-sa/truststore
readonly DP_TRUSTSTORE=${DP_TRUSTSTORE_DIR}/cbrs-dc-sa-truststore.jks
readonly LOG_TAG="DCSA Keystore Monitor"
readonly TIMESTAMP_FILE=/tmp/.cbrs_keystore_timestamp

_BASENAME=/bin/basename
_ECHO=/bin/echo
_JBOSS_CLI=/ericsson/3pp/jboss/bin/jboss-cli.sh
_LOGGER=/usr/bin/logger
_SED=/bin/sed
_STAT=/bin/stat

SCRIPT_NAME=$(${_BASENAME} "${0}")

#######################################
# Action :
#   Log at INFO level
# Globals:
#   None
# Arguments:
#   Message string
# Returns:
#
#######################################
info() {
        ${_LOGGER} -t "${LOG_TAG}" -p user.info "( ${SCRIPT_NAME} ): $1"
}

#######################################
# Action :
#   Log at ERROR level
# Globals:
#   None
# Arguments:
#   Message string
# Returns:
#
#######################################
error() {
        ${_LOGGER} -t "${LOG_TAG}" -p local5.err "( ${SCRIPT_NAME} ): $1"
}


#######################################
# Action :
#   Check that the key and trust stores for secure DCM -> DCSA exist
# Globals:
#   DP_KEYSTORE
#   DP_TRUSTSTORE
# Arguments:
#   None
# Returns:
#
#######################################
check_store_files_exist() {
        [ ! -f ${DP_KEYSTORE} ] && exit 0
        [ ! -f ${DP_TRUSTSTORE} ] && exit 0
}

#######################################
# Action :
#   Create a timestamp file if it does not exist and source it
# Globals:
#   TIMESTAMP_FILE
# Arguments:
#   None
# Returns:
#
#######################################
check_timestamp_file_exists() {
        if [ ! -f ${TIMESTAMP_FILE} ]; then
                ${_ECHO} "DP_KEYSTORE_TIMESTAMP=" >> ${TIMESTAMP_FILE}
                ${_ECHO} "DP_TRUSTSTORE_TIMESTAMP=" >> ${TIMESTAMP_FILE}
        fi
        source ${TIMESTAMP_FILE}
}

#######################################
# Action :
#   Check if the keystore has been updated and force reload in JBoss
# Globals:
#   DP_KEYSTORE
#   DP_KEYSTORE_TIMESTAMP
# Arguments:
#   None
# Returns:
#
#######################################
check_keystore_for_update() {
        local _current_keystore_timestamp
        _current_keystore_timestamp=$(${_STAT} -c %Z ${DP_KEYSTORE})
        if [ -z "${DP_KEYSTORE_TIMESTAMP}" ] || [ "${DP_KEYSTORE_TIMESTAMP}" != "${_current_keystore_timestamp}" ]; then
                _reload_keystore
                _update_timestamp_file DP_KEYSTORE_TIMESTAMP "${_current_keystore_timestamp}"
                info "Successful reload of ${DP_KEYSTORE} and timestamp updated"
        fi
}

#######################################
# Action :
#   Check if the truststore has been updated and force reload in JBoss
# Globals:
#   DP_TRUSTSTORE
#   DP_TRUSTSTORE_TIMESTAMP
# Arguments:
#   None
# Returns:
#
#######################################
check_truststore_for_update() {
        local _current_truststore_timestamp
        _current_truststore_timestamp=$(${_STAT} -c %Z ${DP_TRUSTSTORE})
        if [ -z "${DP_TRUSTSTORE_TIMESTAMP}" ] || [ "${DP_TRUSTSTORE_TIMESTAMP}" != "${_current_truststore_timestamp}" ]; then
                _reload_truststore
                _update_timestamp_file DP_TRUSTSTORE_TIMESTAMP "${_current_truststore_timestamp}"
                info "Successful reload of ${DP_TRUSTSTORE} and timestamp updated"
        fi
}

#######################################
# Action :
#   Update the timestamp file to save the updated time
# Globals:
#   TIMESTAMP_FILE
# Arguments:
#   The store timestamp to be updated
#   The current timestamp of the updated store file
# Returns:
#
#######################################
_update_timestamp_file() {
        ${_SED} -i "s/${1}=.*/${1}=${2}/" ${TIMESTAMP_FILE}
}

#######################################
# Action :
#   Load the keystore and init the keymanager in JBoss
# Globals:
#   None
# Arguments:
#   None
# Returns:
#
#######################################
_reload_keystore() {
        if ! ${_JBOSS_CLI} --connect --command="/subsystem=elytron/key-store=tlsKeyStore:load" > /dev/null 2>&1; then
                error "Failed to reload the tlsKeyStore"
                exit 1
        fi
        if ! ${_JBOSS_CLI} --connect --command="/subsystem=elytron/key-manager=tlsKeyManager:init" > /dev/null 2>&1; then
                error "Failed to init the tlsKeyManager"
                exit 1
        fi
}

#######################################
# Action :
#   Load the truststore and init the trustmanager in JBoss
# Globals:
#   None
# Arguments:
#   None
# Returns:
#
#######################################
_reload_truststore() {
        if ! ${_JBOSS_CLI} --connect --command="/subsystem=elytron/key-store=tlsTrustStore:load" > /dev/null 2>&1; then
                error "Failed to reload the tlsTrustStore"
                exit 1
        fi
        if ! ${_JBOSS_CLI} --connect --command="/subsystem=elytron/trust-manager=tlsTrustManager:init" > /dev/null 2>&1; then
                error "Failed to init the tlsTrustManager"
                exit 1
        fi
}

# MAIN
check_store_files_exist
check_timestamp_file_exists
check_keystore_for_update
check_truststore_for_update

exit 0
